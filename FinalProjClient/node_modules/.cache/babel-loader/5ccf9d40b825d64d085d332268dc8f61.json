{"ast":null,"code":"var _jsxFileName = \"/Users/SeanQuinn/Desktop/CSC437FinalProj/FinalProjClient/src/components/Boards/BoardRoom.jsx\";\nimport React, { Component } from 'react';\nimport { Button, Carousel } from 'react-bootstrap';\nimport { ConfDialog } from '../components';\nimport './BoardRoom.css';\nimport BoardModal from './BoardModal';\nexport default class BoardRoom extends Component {\n  constructor(props) {\n    super(props);\n\n    this.openModal = cnv => {\n      this.setState({\n        showModal: true,\n        editCnv: cnv\n      });\n    };\n\n    this.modalDismiss = result => {\n      if (result.status === \"Ok\") {\n        result.newBoard['prId'] = this.props.Prss.id;\n        console.log('in overview', result.newBoard);\n        this.newBoard(result.newBoard);\n      }\n\n      this.setState({\n        showModal: false\n      });\n    };\n\n    this.openConfirmation = cnv => {\n      this.setState({\n        delCnv: cnv,\n        showConfirmation: true\n      });\n    };\n\n    this.closeConfirmation = res => {\n      if (res === \"Yes\") {\n        this.props.delCnv(this.state.delCnv.id); //this.props.updateCnvs();\n\n        this.setState({\n          showConfirmation: false,\n          delCnv: null\n        });\n      } else {\n        console.log(res);\n        this.setState({\n          showConfirmation: false,\n          delCnv: null\n        });\n      }\n    };\n\n    this.openEdit = cnv => {\n      this.setState({\n        delCnv: cnv,\n        showConfirmation: true\n      });\n    };\n\n    this.props.getBoards(this.props.Prss.id, boardsList => {\n      let boardDict = {};\n      this.props.getMyEntries(entsList => {\n        entsList = entsList.ents;\n        console.log('entsList', entsList);\n        entsList.forEach(ent => {\n          if (boardDict[ent.boardId]) {\n            boardDict[ent.boardId].push(ent);\n          } else {\n            boardDict[ent.boardId] = [ent];\n          }\n        });\n        console.log(\"boardDict\", boardDict);\n        this.setState({\n          boardDict: boardDict\n        });\n      });\n    });\n    this.state = {\n      showModal: false,\n      showConfirmation: false,\n      boardDict: {}\n    };\n  } // Open a model with a |cnv| (optional)\n\n\n  render() {\n    console.log(\"Rerendering Cnv Overview \", this.props);\n    var boards = [];\n    console.log(this.props.Cnvs);\n    this.props.Boards.forEach(board => {\n      if (!this.props.userOnly || this.props.Prss.id === board.prId) boards.push(React.createElement(Carousel.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"carousel-pic\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"d-block w-100\",\n        src: board.picURL,\n        alt: \"First slide\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })), React.createElement(Carousel.Caption, {\n        className: \"carousel-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, board.bName), this.state.boardDict[board.id] ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Number of Times Used:\", this.state.boardDict[board.id].length), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Biggest Wave Ridden:\", this.state.boardDict[board.id].sort((a, b) => a.waveHeight > b.waveHeight ? -1 : 1)[0].waveHeight), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Last Recently Used:\", new Intl.DateTimeFormat('us', {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\"\n      }).format(new Date(this.state.boardDict[board.id].sort((a, b) => a.whenSurfed > b.whenSurfed ? -1 : 1)[0].whenSurfed)))) : '')));\n    });\n    return React.createElement(\"section\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"My Boards\"), React.createElement(Carousel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, boards), React.createElement(Button, {\n      variant: \"primary\",\n      onClick: () => this.openModal(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Add A New Board\"), React.createElement(BoardModal, {\n      showModal: this.state.showModal,\n      onDismiss: this.modalDismiss,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(ConfDialog, {\n      show: this.state.showConfirmation,\n      title: \"Delete Conversation\",\n      body: \"Are you sure you want to delete the Conversation\\n           '\".concat(this.state.delCnv ? this.state.delCnv.title : '', \"'\"),\n      buttons: ['Yes', 'Abort'],\n      onClose: this.closeConfirmation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/SeanQuinn/Desktop/CSC437FinalProj/FinalProjClient/src/components/Boards/BoardRoom.jsx"],"names":["React","Component","Button","Carousel","ConfDialog","BoardModal","BoardRoom","constructor","props","openModal","cnv","setState","showModal","editCnv","modalDismiss","result","status","newBoard","Prss","id","console","log","openConfirmation","delCnv","showConfirmation","closeConfirmation","res","state","openEdit","getBoards","boardsList","boardDict","getMyEntries","entsList","ents","forEach","ent","boardId","push","render","boards","Cnvs","Boards","board","userOnly","prId","picURL","bName","length","sort","a","b","waveHeight","Intl","DateTimeFormat","year","month","day","format","Date","whenSurfed","title"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Button, Carousel} from 'react-bootstrap';\nimport {ConfDialog} from '../components';\nimport './BoardRoom.css'\nimport BoardModal from './BoardModal'\n\nexport default class BoardRoom extends Component {\n   constructor(props) {\n      super(props);\n      this.props.getBoards(this.props.Prss.id,\n         boardsList => {\n            let boardDict = {};\n            this.props.getMyEntries( \n               entsList => {\n                  entsList = entsList.ents;\n                  console.log('entsList',entsList)\n                  entsList.forEach(ent => {\n                     if(boardDict[ent.boardId]){\n                        boardDict[ent.boardId].push(ent);\n                     } else {\n                        boardDict[ent.boardId] = [ent]\n                     }\n                  });\n                  console.log(\"boardDict\", boardDict)\n                  this.setState({boardDict: boardDict});\n               });\n         });\n      this.state = {\n         showModal: false,\n         showConfirmation: false,\n         boardDict: {}\n      }\n   }\n\n   // Open a model with a |cnv| (optional)\n   openModal = (cnv) => {\n      this.setState({showModal: true, editCnv: cnv});\n   }\n\n   modalDismiss = (result) => {\n      if (result.status === \"Ok\") {\n         result.newBoard['prId'] = this.props.Prss.id\n         console.log('in overview', result.newBoard)\n         this.newBoard(result.newBoard);\n      }\n      this.setState({ showModal: false });\n   }\n\n   openConfirmation = (cnv) => {\n      this.setState({ delCnv: cnv, showConfirmation: true })\n   }\n\n   closeConfirmation = (res) => {\n      if(res === \"Yes\"){\n         this.props.delCnv(this.state.delCnv.id);\n         //this.props.updateCnvs();\n         this.setState({showConfirmation: false, delCnv: null });\n      } else {\n         console.log(res)\n         this.setState({ showConfirmation: false, delCnv: null });\n      }\n      \n   }\n\n   openEdit = (cnv) => {\n      this.setState({ delCnv: cnv, showConfirmation: true })\n   }\n\n   \n\n   render() {\n      console.log(\"Rerendering Cnv Overview \", this.props);\n      var boards = [];\n      console.log(this.props.Cnvs)\n      this.props.Boards.forEach(board => {\n         if (!this.props.userOnly || this.props.Prss.id === board.prId)\n            boards.push(\n               <Carousel.Item>\n                  <div className=\"carousel-pic\">\n                     <img \n                        className=\"d-block w-100\"\n                        src={board.picURL}\n                        alt=\"First slide\"\n                     />\n                  </div>\n                  \n                  <Carousel.Caption className=\"carousel-description\">\n                     <h3>{board.bName}</h3>\n                     {this.state.boardDict[board.id] ? \n                        <div>\n                           <p>\n                              Number of Times Used: \n                              {this.state.boardDict[board.id].length}\n                           </p>\n                           <p>Biggest Wave Ridden: \n                              {this.state.boardDict[board.id].sort((a, b) => (a.waveHeight > b.waveHeight) ? -1 : 1)[0].waveHeight}\n                           </p>\n\n                           <p>\n                              Last Recently Used:  \n                              {new Intl.DateTimeFormat('us',\n                                 {\n                                    year: \"numeric\", month: \"short\", day: \"numeric\",\n                                 })\n                              .format(new Date(this.state.boardDict[board.id]\n                               .sort((a, b) => (a.whenSurfed > b.whenSurfed) ?\n                               -1 : 1)[0].whenSurfed))}\n                           </p> \n                        </div>\n                      : ''\n                     }\n                  </Carousel.Caption>\n               </Carousel.Item>\n            );\n      });\n\n      return (\n         <section className=\"container\">\n            <h1 className=\"heading\">My Boards</h1>\n\n            <Carousel>\n               {boards}\n            </Carousel>\n\n            \n            <Button variant=\"primary\" onClick=\n               {() => this.openModal()}>Add A New Board</Button>\n            {/* Modal for creating and change cnv */}\n            \n            <BoardModal\n            showModal={this.state.showModal}\n            onDismiss={this.modalDismiss} />\n            <ConfDialog\n               show={this.state.showConfirmation}\n               title=\"Delete Conversation\"\n               body={`Are you sure you want to delete the Conversation\n           '${this.state.delCnv ? this.state.delCnv.title : ''}'`}\n               buttons={['Yes', 'Abort']}\n               onClose={this.closeConfirmation} />\n         </section>\n      )\n   }\n}\n"]},"metadata":{},"sourceType":"module"}