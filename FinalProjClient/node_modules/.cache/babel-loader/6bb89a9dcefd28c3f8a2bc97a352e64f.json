{"ast":null,"code":"import * as api from '../api';\nexport function clearErrors() {\n  return (dispatch, prevState) => {\n    dispatch({\n      type: \"CLEAR_ERRS\"\n    });\n  };\n}\nexport function signIn(credentials, cb) {\n  return (dispatch, prevState) => {\n    api.signIn(credentials).then(userInfo => dispatch({\n      type: \"SIGN_IN\",\n      user: userInfo\n    })).then(() => {\n      if (cb) cb();\n    }).catch(err => {\n      console.log('here');\n      var temp = '';\n      err.value.forEach(ele => temp += String.fromCharCode([ele]));\n      console.log('temp is', temp);\n      dispatch({\n        type: 'LOGIN_ERR',\n        details: temp\n      });\n    });\n  };\n}\nexport function signOut(cb) {\n  return (dispatch, prevState) => {\n    api.signOut().then(() => dispatch({\n      type: 'SIGN_OUT'\n    })).then(() => {\n      if (cb) cb();\n    });\n  };\n}\nexport function register(data, cb) {\n  return (dispatch, prevState) => {\n    api.register(data).then(() => {\n      if (cb) cb();\n    }).catch(error => dispatch({\n      type: 'REGISTER_ERR',\n      details: error\n    }));\n  };\n}\nexport function updateCnvs(userId, cb) {\n  return (dispatch, prevState) => {\n    api.getCnvs(userId).then(cnvs => dispatch({\n      type: 'UPDATE_CNVS',\n      cnvs\n    })).then(() => {\n      if (cb) cb();\n    });\n  };\n}\nexport function addCnv(newCnv, cb) {\n  return (dispatch, prevState) => {\n    api.postCnv(newCnv).then(cnvRsp => dispatch({\n      type: 'ADD_CNV',\n      cnv: cnvRsp\n    })).then(() => {\n      if (cb) cb();\n    });\n  };\n}\nexport function modCnv(cnvId, title, cb) {\n  return (dispatch, prevState) => {\n    api.putCnv(cnvId, {\n      title\n    }).then(() => {\n      if (cb) cb();\n    });\n  };\n}\nexport function delCnv(id, cb) {\n  return (dispatch, prevState) => {\n    api.delCnv(id).then(() => dispatch({\n      type: 'DEL_CNV'\n    })).then(() => {\n      if (cb) cb();\n    });\n  };\n}","map":{"version":3,"sources":["/Users/SeanQuinn/Desktop/ReactJS3/src/actions/actionCreators.js"],"names":["api","clearErrors","dispatch","prevState","type","signIn","credentials","cb","then","userInfo","user","catch","err","console","log","temp","value","forEach","ele","String","fromCharCode","details","signOut","register","data","error","updateCnvs","userId","getCnvs","cnvs","addCnv","newCnv","postCnv","cnvRsp","cnv","modCnv","cnvId","title","putCnv","delCnv","id"],"mappings":"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","sourcesContent":["import * as api from '../api';\n\nexport function clearErrors() {\n   return (dispatch, prevState) => {\n      dispatch({type: \"CLEAR_ERRS\"});\n   }\n}\n\nexport function signIn(credentials, cb) {\n   return (dispatch, prevState) => {\n      api.signIn(credentials)\n      .then((userInfo) => dispatch({type: \"SIGN_IN\", user: userInfo}))\n      .then(() => {if (cb) cb();})\n      .catch(err => {\n         console.log('here')\n         var temp = '';\n         err.value.forEach(ele => temp += String.fromCharCode([ele]))\n         console.log('temp is', temp)\n         dispatch({type: 'LOGIN_ERR', details: temp})});\n   };\n}\n\nexport function signOut(cb) {\n   return (dispatch, prevState) => {\n      api.signOut()\n      .then(() => dispatch({ type: 'SIGN_OUT' }))\n      .then(() => {if (cb) cb();});\n   };\n}\n\nexport function register(data, cb) {\n   return (dispatch, prevState) => {\n      api.register(data)\n      .then(() => {if (cb) cb();})\n      .catch(error => dispatch({type: 'REGISTER_ERR', details: error}));\n   };\n}\n\nexport function updateCnvs(userId, cb) {\n   return (dispatch, prevState) => {\n      api.getCnvs(userId)\n      .then((cnvs) => dispatch({ type: 'UPDATE_CNVS', cnvs }))\n      .then(() => {if (cb) cb();});\n   };\n}\n\nexport function addCnv(newCnv, cb) {\n   return (dispatch, prevState) => {\n      api.postCnv(newCnv)\n      .then(cnvRsp => dispatch({type: 'ADD_CNV', cnv: cnvRsp}))\n      .then(() => {if (cb) cb();});\n   };\n}\n\nexport function modCnv(cnvId, title, cb) {\n   return (dispatch, prevState) => {\n      api.putCnv(cnvId, {title})\n      .then(() => {if (cb) cb();});\n   };\n}\n\nexport function delCnv(id, cb) {\n   return (dispatch, prevState) => {\n      api.delCnv(id)\n      .then(() => dispatch({ type: 'DEL_CNV' }))\n      .then(() => {if (cb) cb();});\n   };\n}"]},"metadata":{},"sourceType":"module"}