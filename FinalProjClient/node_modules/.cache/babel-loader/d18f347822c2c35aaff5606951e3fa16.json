{"ast":null,"code":"import _defineProperty from \"/Users/SeanQuinn/Desktop/ReactJS3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//import { getPerson } from \"./actions/actionCreators\";\n// Orderly interface to the REST server, providing:\n// 1. Standard URL base\n// 2. Standard headers to manage CORS and content type\n// 3. Guarantee that 4xx and 5xx results are returned as\n//    rejected promises, with a payload comprising an\n//    array of user-readable strings describing the error.\n// 4. All successful post operations return promises that\n//    resolve to a JS object representing the newly added\n//    entity (all fields, not just those in the post body)\n// 5. Signin and signout operations that retain relevant\n//    sessionId data.  Successful signin returns promise \n//    resolving to newly signed in user.\nconst baseURL = \"http://localhost:3001/\";\nconst headers = new Headers();\nvar sessionId;\nheaders.set('Content-Type', 'application/JSON'); //headers.set(\"Access-Control-Allow-Credentials\", true);\n//headers.set(\"Access-Control-Allow-Headers\", \"*\");\n//headers.set(\"Access-Control-Allow-Origin\", \"http://localhost:3001\");\n//headers.set(\"Access-Control-Expose-Headers\", \"Location\");\n// app.use(function(req, res, next) {\n//     next();\n//  });\n//  // No further processing needed for options calls.\n//  app.options(\"/*\", function(req, res) {\n//     res.status(200).end();\n//  });\n\nconst reqConf = {\n  headers: headers,\n  credentials: 'include'\n};\n\nfunction safeFetch(endpoint, method, body) {\n  return fetch(baseURL + endpoint, _objectSpread({\n    method: method,\n    body: body ? JSON.stringify(body) : undefined\n  }, reqConf)).then(res => {\n    var retVal = res.ok ? res : res.json().then(result => Object.values(result).map(r => errorTranslate(r.tag))).then(errors => {\n      console.log('errors', errors);\n      throw errors;\n    });\n    return retVal;\n  }).catch(err => Promise.reject(err));\n} // Helper functions for the comon request types, automatically\n// adding verb, headers, and error management.\n\n\nexport function post(endpoint, body) {\n  return safeFetch(endpoint, 'POST', body);\n}\nexport function put(endpoint, body) {\n  return safeFetch(endpoint, 'PUT', body);\n}\nexport function get(endpoint) {\n  return safeFetch(endpoint, 'GET');\n}\nexport function del(endpoint) {\n  return safeFetch(endpoint, 'DELETE');\n} // Functions for performing the api requests\n\n/**\n * Sign a user into the service, returning a promise of the \n * user data\n * @param {{email: string, password: string}} cred\n */\n\nexport function signIn(cred) {\n  return post(\"Ssns\", cred).then(response => {\n    let i = 0;\n    response.headers.forEach((ele, idx) => {\n      if (idx === \"location\") i++;\n    });\n\n    if (i === 0) {\n      console.log('I was called to throw', i);\n      throw response.body.getReader().read();\n    }\n\n    let location = response.headers.get(\"Location\").split('/');\n    sessionId = location[location.length - 1];\n    return get(\"Ssns/\" + sessionId);\n  }).then(response => response.json()) // ..json() returns a Promise!\n  .then(body => get('Prss/' + body.prsId)).then(userResponse => userResponse.json()).then(rsp => rsp[0]).catch(err => err.then(res => {\n    var temp = '';\n    res.value.forEach(ele => temp += String.fromCharCode([ele]));\n    let errCode = temp.split('\"')[3];\n    throw errMap['en'][errCode];\n  })); // this err is actualyl a promise so we need\n  // a then later\n}\n/**\n * @returns {Promise} result of the sign out request\n */\n\nexport function signOut() {\n  return del(\"Ssns/\" + sessionId);\n}\n/**\n * Register a user\n * @param {Object} user\n * @returns {Promise resolving to new user}\n */\n\nexport function register(user) {\n  return post(\"Prss\", user).then(rsp => {\n    let location = rsp.headers.get(\"Location\").split('/');\n    return get(\"Prss/\" + location[location.length - 1]);\n  }).then(rsp => rsp.json()[0]).catch(err => Promise.reject(err));\n}\n/**\n * @returns {Promise} json parsed data\n */\n\nexport function getCnvs(userId) {\n  return get(\"Cnvs\" + (userId ? \"?owner=\" + userId : \"\")).then(res => res.json());\n}\nexport function putCnv(id, body) {\n  return put(\"Cnvs/\".concat(id), body);\n}\nexport function delCnv(id) {\n  return del(\"Cnvs/\".concat(id));\n}\nexport function postCnv(body) {\n  return post('Cnvs', body).then(rsp => {\n    let location = rsp.headers.get(\"Location\").split('/');\n    return get(\"Cnvs/\".concat(location[location.length - 1]));\n  }).then(rsp => rsp.json());\n}\nexport function getMsgs(cnvId) {\n  return get(\"Cnvs/\".concat(cnvId, \"/Msgs\")).then(res => res.json()).catch(err => console.log('error ', err));\n}\nexport function postMsg(body, cnvId) {\n  console.log(\"new message\", body);\n  return post(\"Cnvs/\".concat(cnvId, \"/Msgs\"), body).then(rsp => {\n    console.log(\"res was \", rsp);\n    let location = rsp.headers.get(\"Location\").split('/');\n    return get(\"Msgs/\".concat(location[location.length - 1]));\n  }).then(rsp => rsp.json()).catch(err => {\n    console.log(err);\n  });\n}\nexport function getPerson(prsId) {\n  return get(\"Prss/\" + prsId).then(res => res.json());\n}\nconst errMap = {\n  en: {\n    missingField: 'Field missing from request: ',\n    badValue: 'Field has bad value: ',\n    notFound: 'Entity not present in DB',\n    badLogin: 'Email/password combination invalid',\n    dupEmail: 'Email duplicates an existing email',\n    noTerms: 'Acceptance of terms is required',\n    forbiddenRole: 'Role specified is not permitted.',\n    noOldPwd: 'Change of password requires an old password',\n    oldPwdMismatch: 'Old password that was provided is incorrect.',\n    dupTitle: 'Conversation title duplicates an existing one',\n    dupEnrollment: 'Duplicate enrollment',\n    forbiddenField: 'Field in body not allowed.',\n    queryFailed: 'Query failed (server problem).'\n  },\n  es: {\n    missingField: '[ES] Field missing from request: ',\n    badValue: '[ES] Field has bad value: ',\n    notFound: '[ES] Entity not present in DB',\n    badLogin: '[ES] Email/password combination invalid',\n    dupEmail: '[ES] Email duplicates an existing email',\n    noTerms: '[ES] Acceptance of terms is required',\n    forbiddenRole: '[ES] Role specified is not permitted.',\n    noOldPwd: '[ES] Change of password requires an old password',\n    oldPwdMismatch: '[ES] Old password that was provided is incorrect.',\n    dupTitle: '[ES] Conversation title duplicates an existing one',\n    dupEnrollment: '[ES] Duplicate enrollment',\n    forbiddenField: '[ES] Field in body not allowed.',\n    queryFailed: '[ES] Query failed (server problem).'\n  },\n  swe: {\n    missingField: 'Ett fält saknas: ',\n    badValue: 'Fält har dåligt värde: ',\n    notFound: 'Entitet saknas i DB',\n    badLogin: 'Email/lösenord kombination ogilltig',\n    dupEmail: 'Email duplicerar en existerande email',\n    noTerms: 'Villkoren måste accepteras',\n    forbiddenRole: 'Angiven roll förjuden',\n    noOldPwd: 'Tidiagre lösenord krav för att updatera lösenordet',\n    oldPwdMismatch: 'Tidigare lösenord felaktigt',\n    dupTitle: 'Konversationstitel duplicerar tidigare existerande titel',\n    dupEnrollment: 'Duplicerad inskrivning',\n    forbiddenField: 'Förbjudet fält i meddelandekroppen',\n    queryFailed: 'Förfrågan misslyckades (server problem).'\n  }\n};\n/**\n * @param {string} errTag\n * @param {string} lang\n */\n\nexport function errorTranslate(errTag, lang = 'en') {\n  return errMap[lang][errTag] || 'Unknown Error!';\n}","map":{"version":3,"sources":["/Users/SeanQuinn/Desktop/ReactJS3/src/api.js"],"names":["baseURL","headers","Headers","sessionId","set","reqConf","credentials","safeFetch","endpoint","method","body","fetch","JSON","stringify","undefined","then","res","retVal","ok","json","result","Object","values","map","r","errorTranslate","tag","errors","console","log","catch","err","Promise","reject","post","put","get","del","signIn","cred","response","i","forEach","ele","idx","getReader","read","location","split","length","prsId","userResponse","rsp","temp","value","String","fromCharCode","errCode","errMap","signOut","register","user","getCnvs","userId","putCnv","id","delCnv","postCnv","getMsgs","cnvId","postMsg","getPerson","en","missingField","badValue","notFound","badLogin","dupEmail","noTerms","forbiddenRole","noOldPwd","oldPwdMismatch","dupTitle","dupEnrollment","forbiddenField","queryFailed","es","swe","errTag","lang"],"mappings":"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","sourcesContent":["//import { getPerson } from \"./actions/actionCreators\";\n\n// Orderly interface to the REST server, providing:\n// 1. Standard URL base\n// 2. Standard headers to manage CORS and content type\n// 3. Guarantee that 4xx and 5xx results are returned as\n//    rejected promises, with a payload comprising an\n//    array of user-readable strings describing the error.\n// 4. All successful post operations return promises that\n//    resolve to a JS object representing the newly added\n//    entity (all fields, not just those in the post body)\n// 5. Signin and signout operations that retain relevant\n//    sessionId data.  Successful signin returns promise \n//    resolving to newly signed in user.\n\nconst baseURL = \"http://localhost:3001/\";\nconst headers = new Headers();\nvar sessionId;\n\nheaders.set('Content-Type', 'application/JSON');\n//headers.set(\"Access-Control-Allow-Credentials\", true);\n//headers.set(\"Access-Control-Allow-Headers\", \"*\");\n//headers.set(\"Access-Control-Allow-Origin\", \"http://localhost:3001\");\n//headers.set(\"Access-Control-Expose-Headers\", \"Location\");\n\n\n// app.use(function(req, res, next) {\n\n//     next();\n//  });\n \n//  // No further processing needed for options calls.\n//  app.options(\"/*\", function(req, res) {\n//     res.status(200).end();\n//  });\n \n\nconst reqConf = {\n    headers: headers,\n    credentials: 'include',\n};\n\nfunction safeFetch(endpoint, method, body) {\n    return fetch(baseURL + endpoint, {\n       method: method,\n       body: (body ? JSON.stringify(body) : undefined),\n       ...reqConf\n    }).then(res => {\n        var retVal = res.ok ? res : \n        res.json().then(result => Object.values(result)\n              .map(r => errorTranslate(r.tag))).then(errors => {console.log('errors', errors);throw errors});\n        return retVal\n    }).catch(err => Promise.reject(err));\n }\n// Helper functions for the comon request types, automatically\n// adding verb, headers, and error management.\nexport function post(endpoint, body) {\n    return safeFetch(endpoint, 'POST', body);\n}\n\nexport function put(endpoint, body) {\n    return safeFetch(endpoint, 'PUT', body);\n}\n\nexport function get(endpoint) {\n    return safeFetch(endpoint, 'GET');\n}\n\nexport function del(endpoint) {\n    return safeFetch(endpoint, 'DELETE');\n}\n\n// Functions for performing the api requests\n\n/**\n * Sign a user into the service, returning a promise of the \n * user data\n * @param {{email: string, password: string}} cred\n */\nexport function signIn(cred) {\n   return post(\"Ssns\", cred)\n      .then(response => {\n         let i = 0;\n         response.headers.forEach((ele, idx) => {if (idx === \"location\")\n                                                   i++;})\n         if (i === 0){\n           console.log('I was called to throw', i)\n           throw response.body.getReader().read();\n         }\n            \n         let location = response.headers.get(\"Location\").split('/');\n\n         sessionId = location[location.length - 1];\n         return get(\"Ssns/\" + sessionId)\n      })\n      .then(response => response.json())   // ..json() returns a Promise!\n      .then(body => get('Prss/' + body.prsId))\n      .then(userResponse => userResponse.json())\n      .then(rsp => rsp[0])\n      .catch(err => \n        err.then(res => {\n            var temp = '';\n            res.value.forEach(ele => temp += String.fromCharCode([ele]))\n            let errCode = temp.split('\"')[3];\n            throw errMap['en'][errCode];\n        })) // this err is actualyl a promise so we need\n                                 // a then later\n}\n\n/**\n * @returns {Promise} result of the sign out request\n */\nexport function signOut() {\n    return del(\"Ssns/\" + sessionId);\n}\n\n/**\n * Register a user\n * @param {Object} user\n * @returns {Promise resolving to new user}\n */\nexport function register(user) {\n   return post(\"Prss\", user)\n   .then(rsp => {\n      let location = rsp.headers.get(\"Location\").split('/');\n      return get(\"Prss/\" + location[location.length - 1]);\n   })\n   .then(rsp => rsp.json()[0])\n   .catch(err => Promise.reject(err));\n}\n\n/**\n * @returns {Promise} json parsed data\n */\nexport function getCnvs(userId) {\n    return get(\"Cnvs\" + (userId ? \"?owner=\"+userId : \"\"))\n    .then((res) => res.json())\n}\n\nexport function putCnv(id, body) {\n    return put(`Cnvs/${id}`, body)\n}\n\nexport function delCnv(id) {\n    return del(`Cnvs/${id}`);\n}\n\nexport function postCnv(body) {\n    return post('Cnvs', body).then(rsp => {\n      let location = rsp.headers.get(\"Location\").split('/');\n      return get(`Cnvs/${location[location.length-1]}`);\n   })\n   .then(rsp => rsp.json());\n}\n\nexport function getMsgs(cnvId) {\n    return get(`Cnvs/${cnvId}/Msgs`).then((res) => res.json())\n    .catch(err => console.log('error ',err));\n}\n\nexport function postMsg (body, cnvId) {\n    console.log(\"new message\", body)\n    return post(`Cnvs/${cnvId}/Msgs`, body).then(rsp => {\n       console.log(\"res was \", rsp)\n       let location = rsp.headers.get(\"Location\").split('/');\n       return get(`Msgs/${location[location.length-1]}`);\n   })\n   .then(rsp => rsp.json())\n   .catch(err => {\n       console.log(err);\n    });\n}\n\nexport function getPerson(prsId) {\n    return get (\"Prss/\" + prsId)\n    .then(res => res.json());\n}\n\nconst errMap = {\n    en: {\n        missingField: 'Field missing from request: ',\n        badValue: 'Field has bad value: ',\n        notFound: 'Entity not present in DB',\n        badLogin: 'Email/password combination invalid',\n        dupEmail: 'Email duplicates an existing email',\n        noTerms: 'Acceptance of terms is required',\n        forbiddenRole: 'Role specified is not permitted.',\n        noOldPwd: 'Change of password requires an old password',\n        oldPwdMismatch: 'Old password that was provided is incorrect.',\n        dupTitle: 'Conversation title duplicates an existing one',\n        dupEnrollment: 'Duplicate enrollment',\n        forbiddenField: 'Field in body not allowed.',\n        queryFailed: 'Query failed (server problem).'\n    },\n    es: {\n        missingField: '[ES] Field missing from request: ',\n        badValue: '[ES] Field has bad value: ',\n        notFound: '[ES] Entity not present in DB',\n        badLogin: '[ES] Email/password combination invalid',\n        dupEmail: '[ES] Email duplicates an existing email',\n        noTerms: '[ES] Acceptance of terms is required',\n        forbiddenRole: '[ES] Role specified is not permitted.',\n        noOldPwd: '[ES] Change of password requires an old password',\n        oldPwdMismatch: '[ES] Old password that was provided is incorrect.',\n        dupTitle: '[ES] Conversation title duplicates an existing one',\n        dupEnrollment: '[ES] Duplicate enrollment',\n        forbiddenField: '[ES] Field in body not allowed.',\n        queryFailed: '[ES] Query failed (server problem).'\n    },\n    swe: {\n        missingField: 'Ett fält saknas: ',\n        badValue: 'Fält har dåligt värde: ',\n        notFound: 'Entitet saknas i DB',\n        badLogin: 'Email/lösenord kombination ogilltig',\n        dupEmail: 'Email duplicerar en existerande email',\n        noTerms: 'Villkoren måste accepteras',\n        forbiddenRole: 'Angiven roll förjuden',\n        noOldPwd: 'Tidiagre lösenord krav för att updatera lösenordet',\n        oldPwdMismatch: 'Tidigare lösenord felaktigt',\n        dupTitle: 'Konversationstitel duplicerar tidigare existerande titel',\n        dupEnrollment: 'Duplicerad inskrivning',\n        forbiddenField: 'Förbjudet fält i meddelandekroppen',\n        queryFailed: 'Förfrågan misslyckades (server problem).'\n    }\n}\n\n/**\n * @param {string} errTag\n * @param {string} lang\n */\nexport function errorTranslate(errTag, lang = 'en') {\n    return errMap[lang][errTag] || 'Unknown Error!';\n}\n"]},"metadata":{},"sourceType":"module"}