{"ast":null,"code":"import _defineProperty from \"/Users/SeanQuinn/Desktop/ReactJS3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//import { getPerson } from \"./actions/actionCreators\";\n// Orderly interface to the REST server, providing:\n// 1. Standard URL base\n// 2. Standard headers to manage CORS and content type\n// 3. Guarantee that 4xx and 5xx results are returned as\n//    rejected promises, with a payload comprising an\n//    array of user-readable strings describing the error.\n// 4. All successful post operations return promises that\n//    resolve to a JS object representing the newly added\n//    entity (all fields, not just those in the post body)\n// 5. Signin and signout operations that retain relevant\n//    sessionId data.  Successful signin returns promise \n//    resolving to newly signed in user.\nconst baseURL = \"http://localhost:3001/\";\nconst headers = new Headers();\nvar sessionId;\nheaders.set('Content-Type', 'application/JSON'); //headers.set(\"Access-Control-Allow-Credentials\", true);\n//headers.set(\"Access-Control-Allow-Headers\", \"*\");\n//headers.set(\"Access-Control-Allow-Origin\", \"http://localhost:3001\");\n//headers.set(\"Access-Control-Expose-Headers\", \"Location\");\n// app.use(function(req, res, next) {\n//     next();\n//  });\n//  // No further processing needed for options calls.\n//  app.options(\"/*\", function(req, res) {\n//     res.status(200).end();\n//  });\n\nconst reqConf = {\n  headers: headers,\n  credentials: 'include'\n};\n\nfunction safeFetch(endpoint, body, type) {\n  var res;\n\n  switch (type) {\n    case 'POST':\n      res = fetch(baseURL + endpoint, _objectSpread({\n        method: 'POST',\n        body: JSON.stringify(body)\n      }, reqConf));\n      return res;\n\n    case 'PUT':\n      res = fetch(baseURL + endpoint, _objectSpread({\n        method: 'PUT',\n        body: JSON.stringify(body)\n      }, reqConf));\n      return res;\n\n    case 'GET':\n      res = fetch(baseURL + endpoint, _objectSpread({\n        method: 'GET'\n      }, reqConf)).then(result => {\n        if (res.length !== 1 || res[0].tags === undefined) return Promise(res);else return Promise.reject(res);\n      }); //console.log('in safe ',res)\n\n      return res;\n\n    case 'DELETE':\n      res = fetch(baseURL + endpoint, _objectSpread({\n        method: 'DELETE'\n      }, reqConf));\n      return res;\n\n    default:\n      return null;\n  }\n} // Helper functions for the comon request types, automatically\n// adding verb, headers, and error management.\n\n\nexport function post(endpoint, body) {\n  return fetch(baseURL + endpoint, _objectSpread({\n    method: 'POST',\n    body: JSON.stringify(body)\n  }, reqConf));\n}\nexport function put(endpoint, body) {\n  return fetch(baseURL + endpoint, _objectSpread({\n    method: 'PUT',\n    body: JSON.stringify(body)\n  }, reqConf));\n}\nexport function get(endpoint) {\n  return safeFetch(endpoint, null, 'GET');\n}\nexport function del(endpoint) {\n  return fetch(baseURL + endpoint, _objectSpread({\n    method: 'DELETE'\n  }, reqConf));\n} // Functions for performing the api requests\n\n/**\n * Sign a user into the service, returning a promise of the \n * user data\n * @param {{email: string, password: string}} cred\n */\n\nexport function signIn(cred) {\n  return post(\"Ssns\", cred).then(response => {\n    let i = 0;\n    response.headers.forEach((ele, idx) => {\n      if (idx === \"location\") i++;\n    });\n\n    if (i === 0) {\n      console.log('I was called to throw', i);\n      throw response.body.getReader().read();\n    }\n\n    let location = response.headers.get(\"Location\").split('/');\n    sessionId = location[location.length - 1];\n    return get(\"Ssns/\" + sessionId);\n  }).then(response => response.json()) // ..json() returns a Promise!\n  .then(body => get('Prss/' + body.prsId)).then(userResponse => userResponse.json()).then(rsp => rsp[0]).catch(err => err.then(res => {\n    var temp = '';\n    res.value.forEach(ele => temp += String.fromCharCode([ele]));\n    let errCode = temp.split('\"')[3];\n    throw errMap['en'][errCode];\n  })); // this err is actualyl a promise so we need\n  // a then later\n}\n/**\n * @returns {Promise} result of the sign out request\n */\n\nexport function signOut() {\n  return del(\"Ssns/\" + sessionId);\n}\n/**\n * Register a user\n * @param {Object} user\n * @returns {Promise resolving to new user}\n */\n\nexport function register(user) {\n  return post(\"Prss\", user).then(rsp => {\n    let location = rsp.headers.get(\"Location\").split('/');\n    return get(\"Prss/\" + location[location.length - 1]);\n  }).then(rsp => rsp.json()[0]).catch(err => err);\n}\n/**\n * @returns {Promise} json parsed data\n */\n\nexport function getCnvs(userId) {\n  return get(\"Cnvs\" + (userId ? \"?owner=\" + userId : \"\")).then(res => res.json());\n}\nexport function putCnv(id, body) {\n  return put(\"Cnvs/\".concat(id), body);\n}\nexport function delCnv(id) {\n  return del(\"Cnvs/\".concat(id));\n}\nexport function postCnv(body) {\n  return post('Cnvs', body).then(rsp => {\n    let location = rsp.headers.get(\"Location\").split('/');\n    return get(\"Cnvs/\".concat(location[location.length - 1]));\n  }).then(rsp => rsp.json());\n}\nexport function getMsgs(cnvId) {\n  return get(\"Cnvs/\".concat(cnvId, \"/Msgs\")).then(res => res.json()).catch(err => console.log('error ', err));\n}\nexport function postMsg(body, cnvId) {\n  console.log(\"new message\", body);\n  return post(\"Cnvs/\".concat(cnvId, \"/Msgs\"), body).then(rsp => {\n    console.log(\"res was \", rsp);\n    let location = rsp.headers.get(\"Location\").split('/');\n    return get(\"Msgs/\".concat(location[location.length - 1]));\n  }).then(rsp => rsp.json()).catch(err => {\n    console.log(err);\n  });\n}\nexport function getPerson(prsId) {\n  return get(\"Prss/\" + prsId).then(res => res.json());\n}\nconst errMap = {\n  en: {\n    missingField: 'Field missing from request: ',\n    badValue: 'Field has bad value: ',\n    notFound: 'Entity not present in DB',\n    badLogin: 'Email/password combination invalid',\n    dupEmail: 'Email duplicates an existing email',\n    noTerms: 'Acceptance of terms is required',\n    forbiddenRole: 'Role specified is not permitted.',\n    noOldPwd: 'Change of password requires an old password',\n    oldPwdMismatch: 'Old password that was provided is incorrect.',\n    dupTitle: 'Conversation title duplicates an existing one',\n    dupEnrollment: 'Duplicate enrollment',\n    forbiddenField: 'Field in body not allowed.',\n    queryFailed: 'Query failed (server problem).'\n  },\n  es: {\n    missingField: '[ES] Field missing from request: ',\n    badValue: '[ES] Field has bad value: ',\n    notFound: '[ES] Entity not present in DB',\n    badLogin: '[ES] Email/password combination invalid',\n    dupEmail: '[ES] Email duplicates an existing email',\n    noTerms: '[ES] Acceptance of terms is required',\n    forbiddenRole: '[ES] Role specified is not permitted.',\n    noOldPwd: '[ES] Change of password requires an old password',\n    oldPwdMismatch: '[ES] Old password that was provided is incorrect.',\n    dupTitle: '[ES] Conversation title duplicates an existing one',\n    dupEnrollment: '[ES] Duplicate enrollment',\n    forbiddenField: '[ES] Field in body not allowed.',\n    queryFailed: '[ES] Query failed (server problem).'\n  },\n  swe: {\n    missingField: 'Ett fält saknas: ',\n    badValue: 'Fält har dåligt värde: ',\n    notFound: 'Entitet saknas i DB',\n    badLogin: 'Email/lösenord kombination ogilltig',\n    dupEmail: 'Email duplicerar en existerande email',\n    noTerms: 'Villkoren måste accepteras',\n    forbiddenRole: 'Angiven roll förjuden',\n    noOldPwd: 'Tidiagre lösenord krav för att updatera lösenordet',\n    oldPwdMismatch: 'Tidigare lösenord felaktigt',\n    dupTitle: 'Konversationstitel duplicerar tidigare existerande titel',\n    dupEnrollment: 'Duplicerad inskrivning',\n    forbiddenField: 'Förbjudet fält i meddelandekroppen',\n    queryFailed: 'Förfrågan misslyckades (server problem).'\n  }\n};\n/**\n * @param {string} errTag\n * @param {string} lang\n */\n\nexport function errorTranslate(errTag, lang = 'en') {\n  return errMap[errTag] || 'Unknown Error!';\n}","map":{"version":3,"sources":["/Users/SeanQuinn/Desktop/ReactJS3/src/api.js"],"names":["baseURL","headers","Headers","sessionId","set","reqConf","credentials","safeFetch","endpoint","body","type","res","fetch","method","JSON","stringify","then","result","length","tags","undefined","Promise","reject","post","put","get","del","signIn","cred","response","i","forEach","ele","idx","console","log","getReader","read","location","split","json","prsId","userResponse","rsp","catch","err","temp","value","String","fromCharCode","errCode","errMap","signOut","register","user","getCnvs","userId","putCnv","id","delCnv","postCnv","getMsgs","cnvId","postMsg","getPerson","en","missingField","badValue","notFound","badLogin","dupEmail","noTerms","forbiddenRole","noOldPwd","oldPwdMismatch","dupTitle","dupEnrollment","forbiddenField","queryFailed","es","swe","errorTranslate","errTag","lang"],"mappings":"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","sourcesContent":["//import { getPerson } from \"./actions/actionCreators\";\n\n// Orderly interface to the REST server, providing:\n// 1. Standard URL base\n// 2. Standard headers to manage CORS and content type\n// 3. Guarantee that 4xx and 5xx results are returned as\n//    rejected promises, with a payload comprising an\n//    array of user-readable strings describing the error.\n// 4. All successful post operations return promises that\n//    resolve to a JS object representing the newly added\n//    entity (all fields, not just those in the post body)\n// 5. Signin and signout operations that retain relevant\n//    sessionId data.  Successful signin returns promise \n//    resolving to newly signed in user.\n\nconst baseURL = \"http://localhost:3001/\";\nconst headers = new Headers();\nvar sessionId;\n\nheaders.set('Content-Type', 'application/JSON');\n//headers.set(\"Access-Control-Allow-Credentials\", true);\n//headers.set(\"Access-Control-Allow-Headers\", \"*\");\n//headers.set(\"Access-Control-Allow-Origin\", \"http://localhost:3001\");\n//headers.set(\"Access-Control-Expose-Headers\", \"Location\");\n\n\n// app.use(function(req, res, next) {\n\n//     next();\n//  });\n \n//  // No further processing needed for options calls.\n//  app.options(\"/*\", function(req, res) {\n//     res.status(200).end();\n//  });\n \n\nconst reqConf = {\n    headers: headers,\n    credentials: 'include',\n};\n\nfunction safeFetch(endpoint, body, type) {\n    var res;\n    switch (type){\n        case 'POST':\n            res =  fetch(baseURL + endpoint, {\n                method: 'POST',\n                body: JSON.stringify(body),\n                ...reqConf\n            });\n            return res;\n        case 'PUT':\n            res = fetch(baseURL + endpoint, {\n                method: 'PUT',\n                body: JSON.stringify(body),\n                ...reqConf\n            });\n            return res\n        case 'GET':\n            res = fetch(baseURL + endpoint, {\n                method: 'GET',\n                ...reqConf\n            }).then(result => {\n                if(res.length !== 1 || res[0].tags === undefined)\n                    return Promise(res);\n                else\n                    return Promise.reject(res)\n            });\n            //console.log('in safe ',res)\n            return res;\n        case 'DELETE':\n            res = fetch(baseURL + endpoint, {\n                method: 'DELETE',\n                ...reqConf\n            });\n            return res;\n        default:\n            return null;\n    }\n\n    \n}\n// Helper functions for the comon request types, automatically\n// adding verb, headers, and error management.\nexport function post(endpoint, body) {\n    return fetch(baseURL + endpoint, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        ...reqConf\n    });\n}\n\nexport function put(endpoint, body) {\n    return fetch(baseURL + endpoint, {\n        method: 'PUT',\n        body: JSON.stringify(body),\n        ...reqConf\n    });\n}\n\nexport function get(endpoint) {\n    return safeFetch(endpoint, null, 'GET');\n}\n\nexport function del(endpoint) {\n    return fetch(baseURL + endpoint, {\n        method: 'DELETE',\n        ...reqConf\n    });\n}\n\n// Functions for performing the api requests\n\n/**\n * Sign a user into the service, returning a promise of the \n * user data\n * @param {{email: string, password: string}} cred\n */\nexport function signIn(cred) {\n   return post(\"Ssns\", cred)\n      .then(response => {\n         let i = 0;\n         response.headers.forEach((ele, idx) => {if (idx === \"location\")\n                                                   i++;})\n         if (i === 0){\n           console.log('I was called to throw', i)\n           throw response.body.getReader().read();\n         }\n            \n         let location = response.headers.get(\"Location\").split('/');\n\n         sessionId = location[location.length - 1];\n         return get(\"Ssns/\" + sessionId)\n      })\n      .then(response => response.json())   // ..json() returns a Promise!\n      .then(body => get('Prss/' + body.prsId))\n      .then(userResponse => userResponse.json())\n      .then(rsp => rsp[0])\n      .catch(err => \n        err.then(res => {\n            var temp = '';\n            res.value.forEach(ele => temp += String.fromCharCode([ele]))\n            let errCode = temp.split('\"')[3];\n            throw errMap['en'][errCode];\n        })) // this err is actualyl a promise so we need\n                                 // a then later\n}\n\n/**\n * @returns {Promise} result of the sign out request\n */\nexport function signOut() {\n    return del(\"Ssns/\" + sessionId);\n}\n\n/**\n * Register a user\n * @param {Object} user\n * @returns {Promise resolving to new user}\n */\nexport function register(user) {\n   return post(\"Prss\", user)\n   .then(rsp => {\n      let location = rsp.headers.get(\"Location\").split('/');\n      return get(\"Prss/\" + location[location.length - 1]);\n   })\n   .then(rsp => rsp.json()[0])\n   .catch(err => err);\n}\n\n/**\n * @returns {Promise} json parsed data\n */\nexport function getCnvs(userId) {\n    return get(\"Cnvs\" + (userId ? \"?owner=\"+userId : \"\"))\n    .then((res) => res.json())\n}\n\nexport function putCnv(id, body) {\n    return put(`Cnvs/${id}`, body)\n}\n\nexport function delCnv(id) {\n    return del(`Cnvs/${id}`);\n}\n\nexport function postCnv(body) {\n    return post('Cnvs', body).then(rsp => {\n      let location = rsp.headers.get(\"Location\").split('/');\n      return get(`Cnvs/${location[location.length-1]}`);\n   })\n   .then(rsp => rsp.json());\n}\n\nexport function getMsgs(cnvId) {\n    return get(`Cnvs/${cnvId}/Msgs`).then((res) => res.json())\n    .catch(err => console.log('error ',err));\n}\n\nexport function postMsg (body, cnvId) {\n    console.log(\"new message\", body)\n    return post(`Cnvs/${cnvId}/Msgs`, body).then(rsp => {\n       console.log(\"res was \", rsp)\n       let location = rsp.headers.get(\"Location\").split('/');\n       return get(`Msgs/${location[location.length-1]}`);\n   })\n   .then(rsp => rsp.json())\n   .catch(err => {\n       console.log(err);\n    });\n}\n\nexport function getPerson(prsId) {\n    return get (\"Prss/\" + prsId)\n    .then(res => res.json());\n}\n\nconst errMap = {\n    en: {\n        missingField: 'Field missing from request: ',\n        badValue: 'Field has bad value: ',\n        notFound: 'Entity not present in DB',\n        badLogin: 'Email/password combination invalid',\n        dupEmail: 'Email duplicates an existing email',\n        noTerms: 'Acceptance of terms is required',\n        forbiddenRole: 'Role specified is not permitted.',\n        noOldPwd: 'Change of password requires an old password',\n        oldPwdMismatch: 'Old password that was provided is incorrect.',\n        dupTitle: 'Conversation title duplicates an existing one',\n        dupEnrollment: 'Duplicate enrollment',\n        forbiddenField: 'Field in body not allowed.',\n        queryFailed: 'Query failed (server problem).'\n    },\n    es: {\n        missingField: '[ES] Field missing from request: ',\n        badValue: '[ES] Field has bad value: ',\n        notFound: '[ES] Entity not present in DB',\n        badLogin: '[ES] Email/password combination invalid',\n        dupEmail: '[ES] Email duplicates an existing email',\n        noTerms: '[ES] Acceptance of terms is required',\n        forbiddenRole: '[ES] Role specified is not permitted.',\n        noOldPwd: '[ES] Change of password requires an old password',\n        oldPwdMismatch: '[ES] Old password that was provided is incorrect.',\n        dupTitle: '[ES] Conversation title duplicates an existing one',\n        dupEnrollment: '[ES] Duplicate enrollment',\n        forbiddenField: '[ES] Field in body not allowed.',\n        queryFailed: '[ES] Query failed (server problem).'\n    },\n    swe: {\n        missingField: 'Ett fält saknas: ',\n        badValue: 'Fält har dåligt värde: ',\n        notFound: 'Entitet saknas i DB',\n        badLogin: 'Email/lösenord kombination ogilltig',\n        dupEmail: 'Email duplicerar en existerande email',\n        noTerms: 'Villkoren måste accepteras',\n        forbiddenRole: 'Angiven roll förjuden',\n        noOldPwd: 'Tidiagre lösenord krav för att updatera lösenordet',\n        oldPwdMismatch: 'Tidigare lösenord felaktigt',\n        dupTitle: 'Konversationstitel duplicerar tidigare existerande titel',\n        dupEnrollment: 'Duplicerad inskrivning',\n        forbiddenField: 'Förbjudet fält i meddelandekroppen',\n        queryFailed: 'Förfrågan misslyckades (server problem).'\n    }\n}\n\n/**\n * @param {string} errTag\n * @param {string} lang\n */\nexport function errorTranslate(errTag, lang = 'en') {\n    return errMap[errTag] || 'Unknown Error!';\n}\n"]},"metadata":{},"sourceType":"module"}