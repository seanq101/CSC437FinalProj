{"ast":null,"code":"import _defineProperty from \"/Users/SeanQuinn/Desktop/ReactJS3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Orderly interface to the REST server, providing:\n// 1. Standard URL base\n// 2. Standard headers to manage CORS and content type\n// 3. Guarantee that 4xx and 5xx results are returned as\n//    rejected promises, with a payload comprising an\n//    array of user-readable strings describing the error.\n// 4. All successful post operations return promises that\n//    resolve to a JS object representing the newly added\n//    entity (all fields, not just those in the post body)\n// 5. Signin and signout operations that retain relevant\n//    sessionId data.  Successful signin returns promise \n//    resolving to newly signed in user.\nconst baseURL = \"http://localhost:3001/\";\nconst headers = new Headers();\nvar sessionId;\nheaders.set('Content-Type', 'application/JSON'); //headers.set(\"Access-Control-Allow-Credentials\", true);\n//headers.set(\"Access-Control-Allow-Headers\", \"*\");\n//headers.set(\"Access-Control-Allow-Origin\", \"http://localhost:3001\");\n//headers.set(\"Access-Control-Expose-Headers\", \"Location\");\n// app.use(function(req, res, next) {\n//     next();\n//  });\n//  // No further processing needed for options calls.\n//  app.options(\"/*\", function(req, res) {\n//     res.status(200).end();\n//  });\n\nconst reqConf = {\n  headers: headers,\n  credentials: 'include'\n}; // Helper functions for the comon request types, automatically\n// adding verb, headers, and error management.\n\nexport function post(endpoint, body) {\n  //console.log(\"just before we send the body\", JSON.stringify(body));\n  return fetch(baseURL + endpoint, _objectSpread({\n    method: 'POST',\n    body: JSON.stringify(body)\n  }, reqConf));\n}\nexport function put(endpoint, body) {\n  return fetch(baseURL + endpoint, _objectSpread({\n    method: 'PUT',\n    body: JSON.stringify(body)\n  }, reqConf));\n}\nexport function get(endpoint) {\n  return fetch(baseURL + endpoint, _objectSpread({\n    method: 'GET'\n  }, reqConf));\n}\nexport function del(endpoint) {\n  return fetch(baseURL + endpoint, _objectSpread({\n    method: 'DELETE'\n  }, reqConf));\n} // Functions for performing the api requests\n\n/**\n * Sign a user into the service, returning a promise of the \n * user data\n * @param {{email: string, password: string}} cred\n */\n\nexport function signIn(cred) {\n  return post(\"Ssns\", cred).then(response => {\n    console.log(response.headers);\n\n    if (response.headers.keys.length === 0) {\n      console.log(\"yeet me already\", response);\n      throw response.body.getReader().read().toString();\n    }\n\n    let location = response.headers.get(\"Location\").split('/');\n    sessionId = location[location.length - 1];\n    return get(\"Ssns/\" + sessionId);\n  }).then(response => response.json()) // ..json() returns a Promise!\n  .then(body => get('Prss/' + body.prsId)).then(userResponse => userResponse.json()).then(rsp => rsp[0]).catch(err => console.log(\"the eroor\", err));\n}\n/**\n * @returns {Promise} result of the sign out request\n */\n\nexport function signOut() {\n  return del(\"Ssns/\" + sessionId);\n}\n/**\n * Register a user\n * @param {Object} user\n * @returns {Promise resolving to new user}\n */\n\nexport function register(user) {\n  return post(\"Prss\", user).then(rsp => {\n    let location = rsp.headers.get(\"Location\").split('/');\n    return get(\"Prss/\" + location[location.length - 1]);\n  }).then(rsp => rsp.json()[0]).catch(err => err);\n}\n/**\n * @returns {Promise} json parsed data\n */\n\nexport function getCnvs(userId) {\n  return get(\"Cnvs\" + (userId ? \"?owner=\" + userId : \"\")).then(res => res.json());\n}\nexport function putCnv(id, body) {\n  return put(\"Cnvs/\".concat(id), body);\n}\nexport function delCnv(id) {\n  return del(\"Cnvs/\".concat(id));\n}\nexport function postCnv(body) {\n  return post('Cnvs', body).then(rsp => {\n    let location = rsp.headers.get(\"Location\").split('/');\n    return get(\"Cnvs/\".concat(location[location.length - 1]));\n  }).then(rsp => rsp.json());\n}\nconst errMap = {\n  en: {\n    missingField: 'Field missing from request: ',\n    badValue: 'Field has bad value: ',\n    notFound: 'Entity not present in DB',\n    badLogin: 'Email/password combination invalid',\n    dupEmail: 'Email duplicates an existing email',\n    noTerms: 'Acceptance of terms is required',\n    forbiddenRole: 'Role specified is not permitted.',\n    noOldPwd: 'Change of password requires an old password',\n    oldPwdMismatch: 'Old password that was provided is incorrect.',\n    dupTitle: 'Conversation title duplicates an existing one',\n    dupEnrollment: 'Duplicate enrollment',\n    forbiddenField: 'Field in body not allowed.',\n    queryFailed: 'Query failed (server problem).'\n  },\n  es: {\n    missingField: '[ES] Field missing from request: ',\n    badValue: '[ES] Field has bad value: ',\n    notFound: '[ES] Entity not present in DB',\n    badLogin: '[ES] Email/password combination invalid',\n    dupEmail: '[ES] Email duplicates an existing email',\n    noTerms: '[ES] Acceptance of terms is required',\n    forbiddenRole: '[ES] Role specified is not permitted.',\n    noOldPwd: '[ES] Change of password requires an old password',\n    oldPwdMismatch: '[ES] Old password that was provided is incorrect.',\n    dupTitle: '[ES] Conversation title duplicates an existing one',\n    dupEnrollment: '[ES] Duplicate enrollment',\n    forbiddenField: '[ES] Field in body not allowed.',\n    queryFailed: '[ES] Query failed (server problem).'\n  },\n  swe: {\n    missingField: 'Ett fält saknas: ',\n    badValue: 'Fält har dåligt värde: ',\n    notFound: 'Entitet saknas i DB',\n    badLogin: 'Email/lösenord kombination ogilltig',\n    dupEmail: 'Email duplicerar en existerande email',\n    noTerms: 'Villkoren måste accepteras',\n    forbiddenRole: 'Angiven roll förjuden',\n    noOldPwd: 'Tidiagre lösenord krav för att updatera lösenordet',\n    oldPwdMismatch: 'Tidigare lösenord felaktigt',\n    dupTitle: 'Konversationstitel duplicerar tidigare existerande titel',\n    dupEnrollment: 'Duplicerad inskrivning',\n    forbiddenField: 'Förbjudet fält i meddelandekroppen',\n    queryFailed: 'Förfrågan misslyckades (server problem).'\n  }\n};\n/**\n * @param {string} errTag\n * @param {string} lang\n */\n\nexport function errorTranslate(errTag, lang = 'en') {\n  return errMap[errTag] || 'Unknown Error!';\n}","map":{"version":3,"sources":["/Users/SeanQuinn/Desktop/ReactJS3/src/api.js"],"names":["baseURL","headers","Headers","sessionId","set","reqConf","credentials","post","endpoint","body","fetch","method","JSON","stringify","put","get","del","signIn","cred","then","response","console","log","keys","length","getReader","read","toString","location","split","json","prsId","userResponse","rsp","catch","err","signOut","register","user","getCnvs","userId","res","putCnv","id","delCnv","postCnv","errMap","en","missingField","badValue","notFound","badLogin","dupEmail","noTerms","forbiddenRole","noOldPwd","oldPwdMismatch","dupTitle","dupEnrollment","forbiddenField","queryFailed","es","swe","errorTranslate","errTag","lang"],"mappings":"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","sourcesContent":["// Orderly interface to the REST server, providing:\n// 1. Standard URL base\n// 2. Standard headers to manage CORS and content type\n// 3. Guarantee that 4xx and 5xx results are returned as\n//    rejected promises, with a payload comprising an\n//    array of user-readable strings describing the error.\n// 4. All successful post operations return promises that\n//    resolve to a JS object representing the newly added\n//    entity (all fields, not just those in the post body)\n// 5. Signin and signout operations that retain relevant\n//    sessionId data.  Successful signin returns promise \n//    resolving to newly signed in user.\n\nconst baseURL = \"http://localhost:3001/\";\nconst headers = new Headers();\nvar sessionId;\n\nheaders.set('Content-Type', 'application/JSON');\n//headers.set(\"Access-Control-Allow-Credentials\", true);\n//headers.set(\"Access-Control-Allow-Headers\", \"*\");\n//headers.set(\"Access-Control-Allow-Origin\", \"http://localhost:3001\");\n//headers.set(\"Access-Control-Expose-Headers\", \"Location\");\n\n\n// app.use(function(req, res, next) {\n\n//     next();\n//  });\n \n//  // No further processing needed for options calls.\n//  app.options(\"/*\", function(req, res) {\n//     res.status(200).end();\n//  });\n \n\nconst reqConf = {\n    headers: headers,\n    credentials: 'include',\n};\n\n// Helper functions for the comon request types, automatically\n// adding verb, headers, and error management.\nexport function post(endpoint, body) {\n    //console.log(\"just before we send the body\", JSON.stringify(body));\n    return fetch(baseURL + endpoint, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        ...reqConf\n    });\n}\n\nexport function put(endpoint, body) {\n    return fetch(baseURL + endpoint, {\n        method: 'PUT',\n        body: JSON.stringify(body),\n        ...reqConf\n    });\n}\n\nexport function get(endpoint) {\n    return fetch(baseURL + endpoint, {\n        method: 'GET',\n        ...reqConf\n    });\n}\n\nexport function del(endpoint) {\n    return fetch(baseURL + endpoint, {\n        method: 'DELETE',\n        ...reqConf\n    });\n}\n\n// Functions for performing the api requests\n\n/**\n * Sign a user into the service, returning a promise of the \n * user data\n * @param {{email: string, password: string}} cred\n */\nexport function signIn(cred) {\n   return post(\"Ssns\", cred)\n      .then(response => {\n        console.log(response.headers)\n         if (response.headers.keys.length === 0){\n            console.log(\"yeet me already\", response);\n            throw response.body.getReader().read().toString()\n         }\n            \n         let location = response.headers.get(\"Location\").split('/');\n         sessionId = location[location.length - 1];\n         return get(\"Ssns/\" + sessionId)\n      })\n      .then(response => response.json())   // ..json() returns a Promise!\n      .then(body => get('Prss/' + body.prsId))\n      .then(userResponse => userResponse.json())\n      .then(rsp => rsp[0])\n      .catch(err => console.log(\"the eroor\", err));\n}\n\n/**\n * @returns {Promise} result of the sign out request\n */\nexport function signOut() {\n    return del(\"Ssns/\" + sessionId);\n}\n\n/**\n * Register a user\n * @param {Object} user\n * @returns {Promise resolving to new user}\n */\nexport function register(user) {\n   return post(\"Prss\", user)\n   .then(rsp => {\n      let location = rsp.headers.get(\"Location\").split('/');\n      return get(\"Prss/\" + location[location.length - 1]);\n   })\n   .then(rsp => rsp.json()[0])\n   .catch(err => err);\n}\n\n/**\n * @returns {Promise} json parsed data\n */\nexport function getCnvs(userId) {\n    return get(\"Cnvs\" + (userId ? \"?owner=\"+userId : \"\"))\n    .then((res) => res.json())\n}\n\nexport function putCnv(id, body) {\n    return put(`Cnvs/${id}`, body)\n}\n\nexport function delCnv(id) {\n    return del(`Cnvs/${id}`);\n}\n\nexport function postCnv(body) {\n    return post('Cnvs', body).then(rsp => {\n      let location = rsp.headers.get(\"Location\").split('/');\n      return get(`Cnvs/${location[location.length-1]}`);\n   })\n   .then(rsp => rsp.json());\n}\n\nconst errMap = {\n    en: {\n        missingField: 'Field missing from request: ',\n        badValue: 'Field has bad value: ',\n        notFound: 'Entity not present in DB',\n        badLogin: 'Email/password combination invalid',\n        dupEmail: 'Email duplicates an existing email',\n        noTerms: 'Acceptance of terms is required',\n        forbiddenRole: 'Role specified is not permitted.',\n        noOldPwd: 'Change of password requires an old password',\n        oldPwdMismatch: 'Old password that was provided is incorrect.',\n        dupTitle: 'Conversation title duplicates an existing one',\n        dupEnrollment: 'Duplicate enrollment',\n        forbiddenField: 'Field in body not allowed.',\n        queryFailed: 'Query failed (server problem).'\n    },\n    es: {\n        missingField: '[ES] Field missing from request: ',\n        badValue: '[ES] Field has bad value: ',\n        notFound: '[ES] Entity not present in DB',\n        badLogin: '[ES] Email/password combination invalid',\n        dupEmail: '[ES] Email duplicates an existing email',\n        noTerms: '[ES] Acceptance of terms is required',\n        forbiddenRole: '[ES] Role specified is not permitted.',\n        noOldPwd: '[ES] Change of password requires an old password',\n        oldPwdMismatch: '[ES] Old password that was provided is incorrect.',\n        dupTitle: '[ES] Conversation title duplicates an existing one',\n        dupEnrollment: '[ES] Duplicate enrollment',\n        forbiddenField: '[ES] Field in body not allowed.',\n        queryFailed: '[ES] Query failed (server problem).'\n    },\n    swe: {\n        missingField: 'Ett fält saknas: ',\n        badValue: 'Fält har dåligt värde: ',\n        notFound: 'Entitet saknas i DB',\n        badLogin: 'Email/lösenord kombination ogilltig',\n        dupEmail: 'Email duplicerar en existerande email',\n        noTerms: 'Villkoren måste accepteras',\n        forbiddenRole: 'Angiven roll förjuden',\n        noOldPwd: 'Tidiagre lösenord krav för att updatera lösenordet',\n        oldPwdMismatch: 'Tidigare lösenord felaktigt',\n        dupTitle: 'Konversationstitel duplicerar tidigare existerande titel',\n        dupEnrollment: 'Duplicerad inskrivning',\n        forbiddenField: 'Förbjudet fält i meddelandekroppen',\n        queryFailed: 'Förfrågan misslyckades (server problem).'\n    }\n}\n\n/**\n * @param {string} errTag\n * @param {string} lang\n */\nexport function errorTranslate(errTag, lang = 'en') {\n    return errMap[errTag] || 'Unknown Error!';\n}\n"]},"metadata":{},"sourceType":"module"}