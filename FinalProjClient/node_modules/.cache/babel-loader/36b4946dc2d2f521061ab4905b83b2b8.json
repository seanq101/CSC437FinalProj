{"ast":null,"code":"import * as api from '../api';\nexport function clearErrors() {\n  return (dispatch, prevState) => {\n    dispatch({\n      type: \"CLEAR_ERRS\"\n    });\n  };\n}\nexport function signIn(credentials, cb) {\n  return (dispatch, prevState) => {\n    api.signIn(credentials).then(userInfo => dispatch({\n      type: \"SIGN_IN\",\n      user: userInfo\n    })).then(() => {\n      if (cb) cb();\n    }).catch(err => {\n      console.log('err is', err);\n      dispatch({\n        type: 'LOGIN_ERR',\n        details: err\n      });\n    });\n  };\n}\nexport function signOut(cb) {\n  return (dispatch, prevState) => {\n    api.signOut().then(() => dispatch({\n      type: 'SIGN_OUT'\n    })).then(() => {\n      if (cb) cb();\n    });\n  };\n}\nexport function register(data, cb) {\n  return (dispatch, prevState) => {\n    api.register(data).then(() => {\n      if (cb) cb();\n    }).catch(error => dispatch({\n      type: 'REGISTER_ERR',\n      details: error\n    }));\n  };\n}\nexport function delCnv(id, cb) {\n  return (dispatch, prevState) => {\n    api.delCnv(id).then(() => {\n      dispatch({\n        type: 'DEL_CNV',\n        cnv: id\n      });\n    }).then(() => {\n      if (cb) cb();\n    });\n  };\n}\nexport function getPerson(prsId, cb) {\n  return (dispatch, prevState) => {\n    api.getPerson(prsId).then(res => {\n      if (cb) cb(res[0]);\n    });\n  };\n}\nexport function getMyEntries(cb) {\n  return (dispatch, prevState) => {\n    api.getMyEnts().then(res => dispatch({\n      type: 'GET_ENTS',\n      ents: res\n    })).then(res => {\n      if (cb) cb(res);\n    });\n  };\n}\nexport function addEntry(newEnt, cb) {\n  console.log('in action creators', newEnt);\n  return (dispatch, prevState) => {\n    api.postEnt(newEnt).then(res => dispatch({\n      type: 'ADD_ENT',\n      ent: res\n    })).then(() => {\n      if (cb) cb();\n    }).catch(err => dispatch({\n      type: 'ADD_ENT_ERR',\n      details: err\n    }));\n  };\n}\nexport function addBoard(newB, cb) {\n  console.log('in action creators', newB);\n  return (dispatch, prevState) => {\n    api.postBoard(newB).then(res => dispatch({\n      type: 'ADD_BOARD',\n      board: res\n    })).then(() => {\n      if (cb) cb();\n    }).catch(err => dispatch({\n      type: 'ADD_BOARD_ERR',\n      details: err\n    }));\n  };\n}\nexport function getPublicEntries(cb) {\n  return (dispatch, prevState) => {\n    api.getPublicEnts().then(res => dispatch({\n      type: 'GET_ENTS',\n      ents: res\n    })).then(res => {\n      if (cb) cb(res);\n    }).catch(err => dispatch({\n      type: 'GET_ENT_ERR',\n      details: err\n    }));\n  };\n}\nexport function getBoards(prsId, cb) {\n  return (dispatch, prevState) => {\n    api.getMyBoards(prsId).then(res => dispatch({\n      type: 'GET_BOARDS',\n      boards: res\n    })).then(res => {\n      if (cb) cb(res);\n    }).catch(err => dispatch({\n      type: 'GET_BOARDS_ERR',\n      details: err\n    }));\n  };\n}\nexport function delEnt(id, cb) {\n  return (dispatch, prevState) => {\n    api.delEnt(id).then(() => {\n      dispatch({\n        type: 'DEL_ENT',\n        cnv: id\n      });\n    }).then(() => {\n      if (cb) cb();\n    });\n  };\n}","map":{"version":3,"sources":["/Users/SeanQuinn/Desktop/CSC437FinalProj/FinalProjClient/src/actions/actionCreators.js"],"names":["api","clearErrors","dispatch","prevState","type","signIn","credentials","cb","then","userInfo","user","catch","err","console","log","details","signOut","register","data","error","delCnv","id","cnv","getPerson","prsId","res","getMyEntries","getMyEnts","ents","addEntry","newEnt","postEnt","ent","addBoard","newB","postBoard","board","getPublicEntries","getPublicEnts","getBoards","getMyBoards","boards","delEnt"],"mappings":"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","sourcesContent":["import * as api from '../api';\n\nexport function clearErrors() {\n   return (dispatch, prevState) => {\n      dispatch({type: \"CLEAR_ERRS\"});\n   }\n}\n\nexport function signIn(credentials, cb) {\n   return (dispatch, prevState) => {\n      api.signIn(credentials)\n      .then((userInfo) => dispatch({type: \"SIGN_IN\", user: userInfo}))\n      .then(() => {if (cb) cb();})\n      .catch(err => {console.log('err is',err);dispatch({type: 'LOGIN_ERR', \n       details: err})});\n   };\n}\n\nexport function signOut(cb) {\n   return (dispatch, prevState) => {\n      api.signOut()\n      .then(() => dispatch({ type: 'SIGN_OUT' }))\n      .then(() => {if (cb) cb();});\n   };\n}\n\nexport function register(data, cb) {\n   return (dispatch, prevState) => {\n      api.register(data)\n      .then(() => {if (cb) cb();})\n      .catch(error => dispatch({type: 'REGISTER_ERR', details: error}));\n   };\n}\n\nexport function delCnv(id, cb) {\n   return (dispatch, prevState) => {\n      api.delCnv(id)\n      .then(() => {dispatch({ type: 'DEL_CNV', cnv: id })})\n      .then(() => {if (cb) cb();});\n   };\n}\n\nexport function getPerson(prsId, cb) {\n   return (dispatch, prevState) => {\n      api.getPerson(prsId)\n      .then(res => {if (cb) cb(res[0]);});\n   }; \n}\n\nexport function getMyEntries(cb) {\n   return (dispatch, prevState) => {\n      api.getMyEnts()\n      .then(res => dispatch({type: 'GET_ENTS', ents : res}))\n      .then(res => {if (cb) cb(res);});\n   }; \n}\n\nexport function addEntry(newEnt, cb) {\n   console.log('in action creators', newEnt)\n   return (dispatch, prevState) => {\n      api.postEnt(newEnt)\n      .then(res => dispatch({type: 'ADD_ENT', ent: res}))\n      .then(() => {if (cb) cb();})\n      .catch(err => dispatch({type: 'ADD_ENT_ERR', details: err}));\n   };\n}\n\n\nexport function addBoard(newB, cb) {\n   console.log('in action creators', newB)\n   return (dispatch, prevState) => {\n      api.postBoard(newB)\n      .then(res => dispatch({type: 'ADD_BOARD', board: res}))\n      .then(() => {if (cb) cb();})\n      .catch(err => dispatch({type: 'ADD_BOARD_ERR', details: err}));\n   };\n}\n\n\nexport function getPublicEntries(cb) {\n   return (dispatch, prevState) => {\n      api.getPublicEnts()\n      .then(res => dispatch({type: 'GET_ENTS', ents : res}))\n      .then(res => {if (cb) cb(res);})\n      .catch(err => dispatch({type: 'GET_ENT_ERR', details: err}));\n   }; \n}\n\nexport function getBoards(prsId, cb) {\n   return (dispatch, prevState) => {\n      api.getMyBoards(prsId)\n      .then(res => dispatch({type: 'GET_BOARDS', boards : res}))\n      .then(res => {if (cb) cb(res);})\n      .catch(err => dispatch({type: 'GET_BOARDS_ERR', details: err}));\n   }; \n}\n\nexport function delEnt(id, cb) {\n   return (dispatch, prevState) => {\n      api.delEnt(id)\n      .then(() => {dispatch({ type: 'DEL_ENT', cnv: id })})\n      .then(() => {if (cb) cb();});\n   };\n}\n"]},"metadata":{},"sourceType":"module"}